const c="You are a text completion assistant. Output clean, paste-ready text with no quotes, markdown formatting, or explanations. Generate natural variations of the requested content. Keep responses under 50 words unless explicitly asked for more. Never ask questions back or include placeholders like [brackets]. Output only the exact text the user needs.",s={enabled:!0,delimiter:" ",expandOnDelimiter:!0,caseSensitive:!1,debugMode:!1,darkMode:"system",customFolders:[],llmKeys:{},llmDefaultProvider:"groq",llmTimeout:5e3,llmMaxTokens:100,llmSystemPrompt:c,llmUsageAlert:80,llmModels:{groq:"llama-3.3-70b-versatile",openai:"gpt-4o-mini",anthropic:"claude-sonnet-4-20250514",gemini:"gemini-2.0-flash-exp"},llmTiers:{groq:"free",openai:"tier1",anthropic:"tier1",gemini:"free"}},p=Object.freeze(Object.defineProperty({__proto__:null,DEFAULT_LLM_SYSTEM_PROMPT:c,DEFAULT_SETTINGS:s},Symbol.toStringTag,{value:"Module"})),a=class a{static async initialize(){if(this.initialized){console.log("StorageManager: Already initialized, skipping");return}if(this.initialized=!0,console.log("StorageManager: Starting initialization..."),typeof chrome>"u")throw new Error("chrome API is not available");if(!chrome.storage)throw new Error("chrome.storage API is not available");if(!chrome.storage.local)throw new Error("chrome.storage.local API is not available");console.log("StorageManager: ✅ chrome.storage.local is available");try{console.log("StorageManager: Getting data with 5000ms timeout...");const i=await Promise.race([chrome.storage.local.get(["snippets","settings"]),new Promise((t,o)=>setTimeout(()=>o(new Error("Storage get timed out after 5000ms")),5e3))]),r=i.snippets||{};let n=!1;for(const t of Object.values(r))t.triggerMode||(t.triggerMode="word",n=!0,console.log("StorageManager: Added default triggerMode to snippet",t.id)),t.label||(t.label=t.trigger,n=!0,console.log("StorageManager: Added default label to snippet",t.id));this.snippetCache=r,this.settingsCache={...s,...i.settings},n&&(console.log("StorageManager: Updating snippets with triggerMode"),await chrome.storage.local.set({snippets:this.snippetCache})),console.log("StorageManager: Loaded",Object.keys(this.snippetCache).length,"snippets"),(!i.settings||JSON.stringify(Object.keys(i.settings))!==JSON.stringify(Object.keys(s)))&&(console.log("StorageManager: Updating settings with new fields"),await chrome.storage.local.set({settings:this.settingsCache})),chrome.storage.onChanged.addListener((t,o)=>{o==="local"&&(t.snippets&&(this.snippetCache=t.snippets.newValue||{},console.log("StorageManager: Snippets updated from external change")),t.settings&&(this.settingsCache=t.settings.newValue||s,console.log("StorageManager: Settings updated from external change")))}),console.log("StorageManager: ✅ Initialized successfully")}catch(e){throw this.initialized=!1,console.error("StorageManager: ❌ Failed to initialize:",e),e}}static async getSnippets(){return this.initialized||await this.initialize(),this.snippetCache}static async getSnippet(e){return this.initialized||await this.initialize(),this.snippetCache[e]}static async saveSnippet(e){this.initialized||await this.initialize(),this.snippetCache[e.id]=e,await chrome.storage.local.set({snippets:this.snippetCache})}static async deleteSnippet(e){this.initialized||await this.initialize(),delete this.snippetCache[e],await chrome.storage.local.set({snippets:this.snippetCache})}static async getSettings(){return this.initialized||await this.initialize(),this.settingsCache}static async saveSettings(e){this.initialized||await this.initialize(),this.settingsCache=e,await chrome.storage.local.set({settings:e})}static async incrementUsage(e){this.initialized||await this.initialize();const i=this.snippetCache[e];i&&(i.usageCount++,i.lastUsed=Date.now(),await this.saveSnippet(i))}static async exportData(){return this.initialized||await this.initialize(),{snippets:this.snippetCache,settings:this.settingsCache}}static async importData(e){this.initialized||await this.initialize(),e.snippets&&(this.snippetCache={...this.snippetCache,...e.snippets},await chrome.storage.local.set({snippets:this.snippetCache})),e.settings&&(this.settingsCache={...this.settingsCache,...e.settings},await chrome.storage.local.set({settings:this.settingsCache}))}};a.snippetCache={},a.settingsCache=s,a.initialized=!1;let l=a;export{l as S,p as t};
