class i{constructor(){this.children=new Map,this.snippet=null,this.isEndOfWord=!1}}class h{constructor(e=!1){this.root=new i,this.caseSensitive=e}normalizeKey(e){return this.caseSensitive?e:e.toLowerCase()}insert(e){if(!e.enabled)return;const s=this.caseSensitive?e.trigger:e.trigger.toLowerCase();let t=this.root;for(const r of s){const n=this.normalizeKey(r);t.children.has(n)||t.children.set(n,new i),t=t.children.get(n)}t.isEndOfWord=!0,t.snippet=e}search(e){const s=this.caseSensitive?e:e.toLowerCase();let t=this.root;for(const r of s){const n=this.normalizeKey(r);if(!t.children.has(n))return null;t=t.children.get(n)}return t.isEndOfWord?t.snippet:null}findMatch(e){if(e.length===0)return null;let s=null;for(let t=e.length;t>0;t--){const r=e.substring(e.length-t),n=this.search(r);n&&(!s||t>s.matchLength)&&(s={snippet:n,matchLength:t})}return s}rebuild(e){this.root=new i,Object.values(e).forEach(s=>this.insert(s))}clear(){this.root=new i}}export{h as SnippetTrie};
