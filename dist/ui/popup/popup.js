import{S as d}from"../../chunks/storage.js";import{l as u}from"../../chunks/logger.js";const g="https://YOUR_VERCEL_FUNCTION_URL/api/create-issue";class m{constructor(){this.initialize()}async initialize(){await d.initialize(),await this.loadStatus(),this.setupEventListeners()}async loadStatus(){const e=await d.getSettings(),t=await d.getSnippets(),s=Object.values(t),r=document.getElementById("status"),n=document.getElementById("status-text"),o=document.getElementById("stats");e.enabled?(r?.classList.remove("disabled"),n&&(n.textContent="‚úì TextBlitz is active")):(r?.classList.add("disabled"),n&&(n.textContent="‚úó TextBlitz is disabled")),o&&(o.textContent=`${s.length} snippet${s.length!==1?"s":""} configured`);const l=document.getElementById("recent-list");if(l){const a=s.filter(i=>i.lastUsed).sort((i,c)=>(c.lastUsed||0)-(i.lastUsed||0)).slice(0,5);a.length===0?l.innerHTML='<div class="empty">No snippets used yet</div>':l.innerHTML=a.map(i=>`
          <div class="recent-item">
            <span class="trigger">${this.escapeHtml(i.trigger)}</span>
            <span class="expansion">‚Üí ${this.escapeHtml(i.expansion.substring(0,30))}${i.expansion.length>30?"...":""}</span>
          </div>
        `).join("")}}setupEventListeners(){document.getElementById("open-options")?.addEventListener("click",()=>{chrome.runtime.openOptionsPage()}),document.getElementById("toggle-enabled")?.addEventListener("click",async()=>{const e=await d.getSettings();e.enabled=!e.enabled,await d.saveSettings(e),await this.loadStatus()}),document.getElementById("report-bug")?.addEventListener("click",()=>{this.showBugReportModal()}),document.getElementById("cancel-bug-report")?.addEventListener("click",()=>{this.hideBugReportModal()}),document.getElementById("submit-bug-report")?.addEventListener("click",()=>{this.submitBugReport()}),document.getElementById("bug-include-logs")?.addEventListener("change",e=>{const t=e.target,s=document.getElementById("log-preview");s&&(s.style.display=t.checked?"block":"none")}),document.getElementById("bug-include-snippet")?.addEventListener("change",()=>{this.loadLogPreview()})}showBugReportModal(){document.getElementById("bug-report-modal")?.classList.add("active"),this.loadLogPreview(),document.getElementById("bug-what-happened").value="",document.getElementById("bug-what-doing").value="",document.getElementById("bug-include-logs").checked=!0,document.getElementById("bug-include-snippet").checked=!1;const t=document.getElementById("bug-status");t&&(t.style.display="none",t.className="status-message")}hideBugReportModal(){document.getElementById("bug-report-modal")?.classList.remove("active")}async loadLogPreview(){const e=document.getElementById("log-preview");if(!e)return;const t=document.getElementById("bug-include-snippet")?.checked||!1;let s=null;if(t){const n=await d.getSnippets(),o=Object.values(n).filter(l=>l.lastUsed).sort((l,a)=>(a.lastUsed||0)-(l.lastUsed||0));o.length>0&&(s={trigger:o[0].trigger,label:o[0].label,expansion:o[0].expansion,type:o[0].type})}const r=u.formatForGitHub(t,s);e.textContent=r}async submitBugReport(){const e=document.getElementById("bug-what-happened").value.trim(),t=document.getElementById("bug-what-doing").value.trim();document.getElementById("bug-include-logs").checked;const s=document.getElementById("bug-include-snippet").checked;document.getElementById("bug-status");const r=document.getElementById("submit-bug-report");if(!e||!t){this.showStatus("error","Please fill in both description fields");return}try{r.disabled=!0,this.showStatus("error","‚è≥ Preparing bug report...");let n=`## User Description

`;n+=`**What happened:** ${e}

`,n+=`**What were you doing:** ${t}

`,n+=`---

`;let o=null;if(s){const a=await d.getSnippets(),i=Object.values(a).filter(c=>c.lastUsed).sort((c,p)=>(p.lastUsed||0)-(c.lastUsed||0));i.length>0&&(o={trigger:i[0].trigger,label:i[0].label,expansion:i[0].expansion,type:i[0].type})}if(n+=u.formatForGitHub(s,o),!g.includes("YOUR_VERCEL_FUNCTION_URL"))try{this.showStatus("error","‚è≥ Submitting to GitHub...");const a=await fetch(g,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:`Bug: ${e.substring(0,60)}...`,body:n})});if(!a.ok)throw new Error(`Server returned ${a.status}`);const i=await a.json();this.showStatus("success",`‚úÖ Bug report submitted! Issue #${i.issueNumber||"created"}`),setTimeout(()=>{this.hideBugReportModal()},2e3);return}catch(a){console.warn("Automated submission failed, falling back to clipboard:",a)}await navigator.clipboard.writeText(n),this.showStatus("success",`üìã Report copied to clipboard! Please paste at:
github.com/martiantux/TextBlitz/issues/new`)}catch(n){console.error("Bug report submission failed:",n),this.showStatus("error",`‚ùå Failed: ${n instanceof Error?n.message:"Unknown error"}.
Try manually reporting at github.com/martiantux/TextBlitz/issues`)}finally{r.disabled=!1}}showStatus(e,t){const s=document.getElementById("bug-status");s&&(s.className=`status-message ${e}`,s.textContent=t,s.style.display="block")}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}}new m;
