import{S as s}from"../chunks/storage.js";chrome.runtime.onInstalled.addListener(async e=>{if(e.reason==="install"){console.log("TextBlitz: Extension installed"),await s.initialize();const n={"example-1":{id:"example-1",label:"By The Way",trigger:"btw",expansion:"by the way",caseSensitive:!1,enabled:!0,triggerMode:"word",createdAt:Date.now(),usageCount:0,type:"static"},"example-2":{id:"example-2",label:"Thank You",trigger:"thx",expansion:"thank you",caseSensitive:!1,enabled:!0,triggerMode:"word",createdAt:Date.now(),usageCount:0,type:"static"},"example-3":{id:"example-3",label:"Be Right Back",trigger:"brb",expansion:"be right back",caseSensitive:!1,enabled:!0,triggerMode:"word",createdAt:Date.now(),usageCount:0,type:"static"}};for(const t of Object.values(n))await s.saveSnippet(t);console.log("TextBlitz: Example snippets created")}});let r=!1;async function o(){if(!r)try{await chrome.offscreen.createDocument({url:"offscreen/offscreen.html",reasons:["CLIPBOARD"],justification:"Process snippet expansions with clipboard and command parsing"}),r=!0,console.log("TextBlitz: Offscreen document created")}catch(e){console.error("TextBlitz: Failed to create offscreen document",e)}}async function i(){(await chrome.runtime.getContexts({contextTypes:["OFFSCREEN_DOCUMENT"]})).length===0&&(r=!1,await o())}chrome.runtime.onMessage.addListener((e,n,t)=>(e.type==="PROCESS_SNIPPET"&&c(e).then(a=>t({success:!0,...a})).catch(a=>t({success:!1,error:a.message})),!0));async function c(e){return await i(),await chrome.runtime.sendMessage(e)}
